classdef AdniMerge < handle
    %% ADNIMERGE implements use of csv files generated by the ADNIMERGE project, https://adni.bitbucket.io .
    %  See also:  https://groups.google.com/g/adni-data
    %
    %     e.g.:
    %        OriginalVariableNames                   Var1                           Var2                           Var3                           Var4                           Var5                           Var6                           Var7            
    %     ____________________________    ___________________________    ___________________________    ___________________________    ___________________________    ___________________________    ___________________________    ___________________________
    % 
    %     {'RID'                     }    {[                    230]}    {[                    230]}    {[                    230]}    {[                    230]}    {[                    230]}    {[                    230]}    {[                    230]}
    %     {'PTID'                    }    {'128_S_0230'             }    {'128_S_0230'             }    {'128_S_0230'             }    {'128_S_0230'             }    {'128_S_0230'             }    {'128_S_0230'             }    {'128_S_0230'             }
    %     {'VISCODE'                 }    {'bl'                     }    {'m06'                    }    {'m12'                    }    {'m24'                    }    {'m36'                    }    {'m96'                    }    {'m72'                    }
    %     {'SITE'                    }    {[                    128]}    {[                    128]}    {[                    128]}    {[                    128]}    {[                    128]}    {[                    128]}    {[                    128]}
    %     {'COLPROT'                 }    {'ADNI1'                  }    {'ADNI1'                  }    {'ADNI1'                  }    {'ADNI1'                  }    {'ADNI1'                  }    {'ADNI2'                  }    {'ADNI2'                  }
    %     {'ORIGPROT'                }    {'ADNI1'                  }    {'ADNI1'                  }    {'ADNI1'                  }    {'ADNI1'                  }    {'ADNI1'                  }    {'ADNI1'                  }    {'ADNI1'                  }
    %     {'EXAMDATE'                }    {[2006-03-30             ]}    {[2006-10-18             ]}    {[2007-03-23             ]}    {[2008-04-04             ]}    {[2009-09-16             ]}    {[2014-01-14             ]}    {[2012-01-05             ]}
    %     {'DX_bl'                   }    {'CN'                     }    {'CN'                     }    {'CN'                     }    {'CN'                     }    {'CN'                     }    {'CN'                     }    {'CN'                     }
    %     {'AGE'                     }    {[                     80]}    {[                     80]}    {[                     80]}    {[                     80]}    {[                     80]}    {[                     80]}    {[                     80]}
    %     {'PTGENDER'                }    {'Male'                   }    {'Male'                   }    {'Male'                   }    {'Male'                   }    {'Male'                   }    {'Male'                   }    {'Male'                   }
    %     {'PTEDUCAT'                }    {[                     20]}    {[                     20]}    {[                     20]}    {[                     20]}    {[                     20]}    {[                     20]}    {[                     20]}
    %     {'PTETHCAT'                }    {'Not Hisp/Latino'        }    {'Not Hisp/Latino'        }    {'Not Hisp/Latino'        }    {'Not Hisp/Latino'        }    {'Not Hisp/Latino'        }    {'Not Hisp/Latino'        }    {'Not Hisp/Latino'        }
    %     {'PTRACCAT'                }    {'White'                  }    {'White'                  }    {'White'                  }    {'White'                  }    {'White'                  }    {'White'                  }    {'White'                  }
    %     {'PTMARRY'                 }    {'Married'                }    {'Married'                }    {'Married'                }    {'Married'                }    {'Married'                }    {'Married'                }    {'Married'                }
    %     {'APOE4'                   }    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}
    %     {'FDG'                     }    {[      1.098290000000000]}    {[      1.062490000000000]}    {[      1.057430000000000]}    {[      1.010540000000000]}    {[      1.162290000000000]}    {[      0.785154000000000]}    {[      0.932040000000000]}
    %     {'PIB'                     }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'AV45'                    }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[      1.086400000000000]}    {[      1.101900000000000]}
    %     {'ABETA'                   }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'TAU'                     }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'PTAU'                    }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'CDRSB'                   }    {[                      0]}    {[                      1]}    {[      1.500000000000000]}    {[      2.500000000000000]}    {[      5.500000000000000]}    {[                     10]}    {[                      7]}
    %     {'ADAS11'                  }    {[                      8]}    {[     10.330000000000000]}    {[      8.670000000000000]}    {[     13.330000000000000]}    {[                     15]}    {[                     33]}    {[                     17]}
    %     {'ADAS13'                  }    {[                     11]}    {[     13.330000000000000]}    {[     10.670000000000000]}    {[     18.329999999999998]}    {[                     20]}    {[                     46]}    {[                     27]}
    %     {'ADASQ4'                  }    {[                      2]}    {[                      2]}    {[                      2]}    {[                      4]}    {[                      4]}    {[                     10]}    {[                      7]}
    %     {'MMSE'                    }    {[                     29]}    {[                     28]}    {[                     30]}    {[                     27]}    {[                     26]}    {[                     18]}    {[                     22]}
    %     {'RAVLT_immediate'         }    {[                     49]}    {[                     49]}    {[                     54]}    {[                     38]}    {[                     42]}    {[                     23]}    {[                     34]}
    %     {'RAVLT_learning'          }    {[                      5]}    {[                     12]}    {[                      9]}    {[                      8]}    {[                      8]}    {[                      1]}    {[                      4]}
    %     {'RAVLT_forgetting'        }    {[                      1]}    {[                      3]}    {[                      2]}    {[                      2]}    {[                      6]}    {[                      5]}    {[                      5]}
    %     {'RAVLT_perc_forgetting'   }    {[      7.692310000000000]}    {[                     20]}    {[     13.333299999999999]}    {[     18.181799999999999]}    {[                     50]}    {[                    100]}    {[     55.555599999999998]}
    %     {'LDELTOTAL'               }    {[                     10]}    {[                    NaN]}    {[                      8]}    {[                      4]}    {[                      8]}    {[                      0]}    {[                      3]}
    %     {'DIGITSCOR'               }    {[                     38]}    {[                     43]}    {[                     43]}    {[                     36]}    {[                     31]}    {[                    NaN]}    {[                    NaN]}
    %     {'TRABSCOR'                }    {[                    195]}    {[                     74]}    {[                     77]}    {[                    105]}    {[                    128]}    {[                    NaN]}    {[                    283]}
    %     {'FAQ'                     }    {[                      0]}    {[                      2]}    {[                      0]}    {[                      4]}    {[                     21]}    {[                     30]}    {[                     25]}
    %     {'MOCA'                    }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                     13]}    {[                     20]}
    %     {'EcogPtMem'               }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                      3]}    {[                      1]}
    %     {'EcogPtLang'              }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[      2.444440000000000]}    {[                      1]}
    %     {'EcogPtVisspat'           }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[      2.571430000000000]}    {[      1.142860000000000]}
    %     {'EcogPtPlan'              }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[      3.200000000000000]}    {[                      1]}
    %     {'EcogPtOrgan'             }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[      3.500000000000000]}    {[                    NaN]}
    %     {'EcogPtDivatt'            }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[      3.333330000000000]}    {[                      1]}
    %     {'EcogPtTotal'             }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[      2.921050000000000]}    {[      1.029410000000000]}
    %     {'EcogSPMem'               }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                      4]}    {[                      4]}
    %     {'EcogSPLang'              }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[      3.888890000000000]}    {[      2.222220000000000]}
    %     {'EcogSPVisspat'           }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[      3.857140000000000]}    {[                      3]}
    %     {'EcogSPPlan'              }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                      4]}    {[      3.800000000000000]}
    %     {'EcogSPOrgan'             }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                      4]}    {[                      4]}
    %     {'EcogSPDivatt'            }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                      4]}    {[                    NaN]}
    %     {'EcogSPTotal'             }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[      3.948720000000000]}    {[      3.351350000000000]}
    %     {'FLDSTRENG'               }    {'1.5 Tesla MRI'          }    {'1.5 Tesla MRI'          }    {'1.5 Tesla MRI'          }    {'1.5 Tesla MRI'          }    {0×0 char                 }    {0×0 char                 }    {0×0 char                 }
    %     {'IMAGEUID'                }    {[                 119383]}    {[                 119384]}    {[                  68849]}    {[                 102423]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'Ventricles'              }    {[                  39562]}    {[                  39867]}    {[                  41076]}    {[                  43753]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'Hippocampus'             }    {[                   5700]}    {[                   5888]}    {[                   5787]}    {[                   5830]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'WholeBrain'              }    {[                1051050]}    {[                1076940]}    {[                1064480]}    {[                1052260]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'Entorhinal'              }    {[                   2366]}    {[                   2295]}    {[                   2510]}    {[                   2735]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'Fusiform'                }    {[                  16394]}    {[                  16664]}    {[                  16898]}    {[                  16465]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'MidTemp'                 }    {[                  22334]}    {[                  22834]}    {[                  21972]}    {[                  22467]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'ICV'                     }    {[                1714030]}    {[                1739610]}    {[                1742490]}    {[                1745920]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'DX'                      }    {'CN'                     }    {'CN'                     }    {'CN'                     }    {'CN'                     }    {'Dementia'               }    {'Dementia'               }    {'Dementia'               }
    %     {'mPACCdigit'              }    {[     -1.392850000000000]}    {[     -1.084710000000000]}    {[     -0.602291000000000]}    {[     -6.295530000000000]}    {[     -6.487120000000000]}    {[    -23.953900000000001]}    {[    -15.737299999999999]}
    %     {'mPACCtrailsB'            }    {[     -2.901980000000000]}    {[     -0.683706000000000]}    {[     -0.395445000000000]}    {[     -6.136900000000000]}    {[     -6.308540000000000]}    {[    -23.953900000000001]}    {[    -14.959400000000000]}
    %     {'EXAMDATE_bl'             }    {[2006-03-30             ]}    {[2006-03-30             ]}    {[2006-03-30             ]}    {[2006-03-30             ]}    {[2006-03-30             ]}    {[2006-03-30             ]}    {[2006-03-30             ]}
    %     {'CDRSB_bl'                }    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}
    %     {'ADAS11_bl'               }    {[                      8]}    {[                      8]}    {[                      8]}    {[                      8]}    {[                      8]}    {[                      8]}    {[                      8]}
    %     {'ADAS13_bl'               }    {[                     11]}    {[                     11]}    {[                     11]}    {[                     11]}    {[                     11]}    {[                     11]}    {[                     11]}
    %     {'ADASQ4_bl'               }    {[                      2]}    {[                      2]}    {[                      2]}    {[                      2]}    {[                      2]}    {[                      2]}    {[                      2]}
    %     {'MMSE_bl'                 }    {[                     29]}    {[                     29]}    {[                     29]}    {[                     29]}    {[                     29]}    {[                     29]}    {[                     29]}
    %     {'RAVLT_immediate_bl'      }    {[                     49]}    {[                     49]}    {[                     49]}    {[                     49]}    {[                     49]}    {[                     49]}    {[                     49]}
    %     {'RAVLT_learning_bl'       }    {[                      5]}    {[                      5]}    {[                      5]}    {[                      5]}    {[                      5]}    {[                      5]}    {[                      5]}
    %     {'RAVLT_forgetting_bl'     }    {[                      1]}    {[                      1]}    {[                      1]}    {[                      1]}    {[                      1]}    {[                      1]}    {[                      1]}
    %     {'RAVLT_perc_forgetting_bl'}    {[      7.692310000000000]}    {[      7.692310000000000]}    {[      7.692310000000000]}    {[      7.692310000000000]}    {[      7.692310000000000]}    {[      7.692310000000000]}    {[      7.692310000000000]}
    %     {'LDELTOTAL_BL'            }    {[                     10]}    {[                     10]}    {[                     10]}    {[                     10]}    {[                     10]}    {[                     10]}    {[                     10]}
    %     {'DIGITSCOR_bl'            }    {[                     38]}    {[                     38]}    {[                     38]}    {[                     38]}    {[                     38]}    {[                     38]}    {[                     38]}
    %     {'TRABSCOR_bl'             }    {[                    195]}    {[                    195]}    {[                    195]}    {[                    195]}    {[                    195]}    {[                    195]}    {[                    195]}
    %     {'FAQ_bl'                  }    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}    {[                      0]}
    %     {'mPACCdigit_bl'           }    {[     -1.392850000000000]}    {[     -1.392850000000000]}    {[     -1.392850000000000]}    {[     -1.392850000000000]}    {[     -1.392850000000000]}    {[     -1.392850000000000]}    {[     -1.392850000000000]}
    %     {'mPACCtrailsB_bl'         }    {[     -2.901980000000000]}    {[     -2.901980000000000]}    {[     -2.901980000000000]}    {[     -2.901980000000000]}    {[     -2.901980000000000]}    {[     -2.901980000000000]}    {[     -2.901980000000000]}
    %     {'FLDSTRENG_bl'            }    {'1.5 Tesla MRI'          }    {'1.5 Tesla MRI'          }    {'1.5 Tesla MRI'          }    {'1.5 Tesla MRI'          }    {'1.5 Tesla MRI'          }    {'1.5 Tesla MRI'          }    {'1.5 Tesla MRI'          }
    %     {'Ventricles_bl'           }    {[                  39562]}    {[                  39562]}    {[                  39562]}    {[                  39562]}    {[                  39562]}    {[                  39562]}    {[                  39562]}
    %     {'Hippocampus_bl'          }    {[                   5700]}    {[                   5700]}    {[                   5700]}    {[                   5700]}    {[                   5700]}    {[                   5700]}    {[                   5700]}
    %     {'WholeBrain_bl'           }    {[                1051050]}    {[                1051050]}    {[                1051050]}    {[                1051050]}    {[                1051050]}    {[                1051050]}    {[                1051050]}
    %     {'Entorhinal_bl'           }    {[                   2366]}    {[                   2366]}    {[                   2366]}    {[                   2366]}    {[                   2366]}    {[                   2366]}    {[                   2366]}
    %     {'Fusiform_bl'             }    {[                  16394]}    {[                  16394]}    {[                  16394]}    {[                  16394]}    {[                  16394]}    {[                  16394]}    {[                  16394]}
    %     {'MidTemp_bl'              }    {[                  22334]}    {[                  22334]}    {[                  22334]}    {[                  22334]}    {[                  22334]}    {[                  22334]}    {[                  22334]}
    %     {'ICV_bl'                  }    {[                1714030]}    {[                1714030]}    {[                1714030]}    {[                1714030]}    {[                1714030]}    {[                1714030]}    {[                1714030]}
    %     {'MOCA_bl'                 }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogPtMem_bl'            }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogPtLang_bl'           }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogPtVisspat_bl'        }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogPtPlan_bl'           }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogPtOrgan_bl'          }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogPtDivatt_bl'         }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogPtTotal_bl'          }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogSPMem_bl'            }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogSPLang_bl'           }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogSPVisspat_bl'        }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogSPPlan_bl'           }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogSPOrgan_bl'          }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogSPDivatt_bl'         }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'EcogSPTotal_bl'          }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'ABETA_bl'                }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'TAU_bl'                  }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'PTAU_bl'                 }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'FDG_bl'                  }    {[      1.098290000000000]}    {[      1.098290000000000]}    {[      1.098290000000000]}    {[      1.098290000000000]}    {[      1.098290000000000]}    {[      1.098290000000000]}    {[      1.098290000000000]}
    %     {'PIB_bl'                  }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'AV45_bl'                 }    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}    {[                    NaN]}
    %     {'Years_bl'                }    {[                      0]}    {[      0.553046000000000]}    {[      0.980151000000000]}    {[      2.015060000000000]}    {[      3.466120000000000]}    {[      7.794660000000000]}    {[      5.768650000000000]}
    %     {'Month_bl'                }    {[                      0]}    {[      6.622950000000000]}    {[     11.737700000000000]}    {[     24.131100000000000]}    {[     41.508200000000002]}    {[     93.344300000000004]}    {[     69.081999999999994]}
    %     {'Month'                   }    {[                      0]}    {[                      6]}    {[                     12]}    {[                     24]}    {[                     42]}    {[                     96]}    {[                     72]}
    %     {'M'                       }    {[                      0]}    {[                      6]}    {[                     12]}    {[                     24]}    {[                     36]}    {[                     96]}    {[                     72]}
    %     {'update_stamp'            }    {[2021-07-31 06:16:38.000]}    {[2021-07-31 06:16:38.000]}    {[2021-07-31 06:16:38.000]}    {[2021-07-31 06:16:38.000]}    {[2021-07-31 06:16:38.000]}    {[2021-07-31 06:16:38.000]}    {[2021-07-31 06:16:38.000]}
    %     
    %  Created 26-Dec-2021 19:07:31 by jjlee in repository /Users/jjlee/MATLAB-Drive/mladni/src/+mladni.
    %  Developed on Matlab 9.11.0.1809720 (R2021b) Update 1 for MACI64.  Copyright 2021 John J. Lee.

    properties
        home
        study_design
        reuse_cache
    end

    properties (Dependent)
        amyloid_file
        apoe_file
        av45_file
        cdr_file
        dict_file
        fbb_file
        merge_file
        mpr_meta_file
        mri_imageqc_file
        mri_quality_file
        mri_quality_adni3_file
        neuropath_file
        pet_c3_file
        pet_meta_adni1_file
        pet_meta_adnigo2_file
        pet_meta_adni3_file
        pet_meta_list_file
        pet_qc_file
        registry_file
        strokesum_file
        subjects
        tau_file
        ucberkeleyav1451_file
        ucberkeleyfdg_file
        ucsdvol_file
        ucsfsntvol_file
    end

    methods % GET
        function g = get.amyloid_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", 'ucberkeley_av45_fbb_skinny.csv');
            % unique RID ~ 1325
        end
        function g = get.apoe_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", 'APOERES.csv');
        end
        function g = get.av45_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata",  'UCBERKELEYAV45_04_26_22.csv');
        end
        function g = get.cdr_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "cdr_20220602.csv"); %"CDR.csv");
            % unique RID ~ 3418
        end
        function g = get.dict_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "ADNIMERGE_DICT_14May2023.csv");
        end
        function g = get.fbb_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", 'UCBERKELEYFBB_04_26_22.csv');
        end
        function g = get.merge_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "ADNIMERGE_14May2023.csv"); % "adnimerge_20220602.csv");
            % unique PTID ~ 1855, unique IMAGEUID ~ 13923
        end
        function g = get.mpr_meta_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "MPRAGEMETA.csv");
            % unique SubjectID ~ 2519, unique ImageUID ~ 37574
        end  
        function g = get.mri_imageqc_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "MAYOADIRL_MRI_IMAGEQC.csv");
            % unique RID ~ 840, unique LONIUID ~ 11573
        end
        function g = get.mri_quality_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "MRIQUALITY.csv");
            % unique RID ~ 840, unique LONIUID ~ 11573
        end
        function g = get.mri_quality_adni3_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "MAYOADIRL_MRI_QUALITY_ADNI3.csv");
            % unique PTID ~ 1035, unique LONI_IMAGE ~ 21744
        end
        function g = get.neuropath_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "NEUROPATH_05_17_21.csv");
        end
        function g = get.pet_c3_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "PETC3.csv");
            % unique RID ~ 395, unique LONIUID ~ 407
        end
        function g = get.pet_meta_adni1_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "PETMETA_ADNI1.csv");
            % unique RID ~ 420
        end
        function g = get.pet_meta_adnigo2_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "PETMETA_ADNIGO2.csv");
            % unique RID ~ 1212
        end
        function g = get.pet_meta_adni3_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "PETMETA3.csv");
            % unique RID ~ 641
        end
        function g = get.pet_meta_list_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "PET_META_LIST.csv");
            % unique Subject ~ 2028, unique ImageID ~ 50843
        end
        function g = get.pet_qc_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "PETQC.csv");
            % unique RID ~ 1413, unique LONIUID ~ 3950
        end
        function g = get.registry_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "REGISTRY.csv"); %"registry_20220602.csv");
            % unique RID ~ 4045, unique ID ~ 15637
        end
        function g = get.strokesum_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "STROKESUM_V2.csv");
        end
        function g = get.subjects(this)
            g = this.subjects_;
        end
        function g = get.tau_file(~)
            g = fullfile(getenv("ADNI_HOME"), 'studydata', 'ucberkeley_av1451_pvc_skinny.csv');
        end
        function g = get.ucberkeleyav1451_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "UCBERKELEYAV1451_PVC_04_29_22.csv");
        end
        function g = get.ucberkeleyfdg_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "UCBERKELEYFDG_03_25_22.csv");
        end
        function g = get.ucsdvol_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "UCSDVOL.csv");
        end
        function g = get.ucsfsntvol_file(~)
            g = fullfile(getenv("ADNI_HOME"), "studydata", "UCSFSNTVOL.csv");
        end       
    end

    methods
        function t = best_practice_baseline_EXAMDATE(this, t)
            %% Update t with table_registry.EXAMDATE (cf. ADNI Google Group)

            t_reg = this.table_registry();
            for row = 1:size(t, 1)
                t_row = t(row, :);
                ED1 = t_reg{t_reg.RID == t_row.RID & strcmp(t_reg.VISCODE, t_row.VISCODE), 'EXAMDATE'};
                if isscalar(ED1) && ~isnat(ED1)
                    t{row, 'EXAMDATE'} = ED1;
                end
            end
        end
        function t = dict(this, varargin)
            t = this.dict_;
            t = this.table_paren(t, varargin{:});
        end
        function t = reduce_cross_tables(this, t1, t2, opts)
            %% Reduce cross-sectional tables

            arguments
                this mladni.AdniMerge  
                t1 table
                t2 table
                opts.vars cell = {'RID', 'EXAMDATE', 'TRACER', 'AmyloidStatus', 'SUMMARYSUVR_WHOLECEREBNORM', 'SUMMARYSUVR_COMPOSITE_REFNORM'} % {pivot_var, ..., kept_var, ...}
                opts.pivot_vars {mustBeText} = {'RID', 'EXAMDATE'}
            end

            t_ = reduce_long_tables(this, t1, t2, vars=opts.vars, pivot_vars=opts.pivot_vars);
            t  = table();
            urid = unique(t_.RID);
            for idx = 1:length(urid)
                trid_ = t_(t_.RID == urid(idx),:); % match multiple rows of longitudinal data, usually
                trid_ = sortrows(trid_, 'EXAMDATE'); % select earlist row for urid()
                t = [t; trid_(1,:)]; %#ok<AGROW> 
            end
        end
        function t = reduce_long_tables(this, t1, t2, opts)
            %% Reduce longitudinal tables

            arguments
                this mladni.AdniMerge %#ok<INUSA> 
                t1 table
                t2 table
                opts.vars cell = {'RID', 'EXAMDATE', 'TRACER', 'AmyloidStatus', 'SUMMARYSUVR_WHOLECEREBNORM', 'SUMMARYSUVR_COMPOSITE_REFNORM'} % {pivot_var, ..., kept_var, ...}
                opts.pivot_vars {mustBeText} = {'RID', 'EXAMDATE'}
            end

            t1 = t1(:,opts.vars);
            t2 = t2(:,opts.vars);
            t = [t1; t2];
            t = sortrows(t, opts.pivot_vars);            
        end
        function t = table(this, varargin)
            t = this.table_merge(varargin{:});
        end
        function [t,t_av45,t_fbb] = table_amyloid(this, varargin)
            %% Strictly from Berkeley imaging
            %  https://adni.bitbucket.io/reference/docs/UCBERKELEYAV45/UCBERKELEY_AV45_Methods_04.25.2022.pdf
            %  https://adni.bitbucket.io/reference/docs/UCBERKELEYFBB/UCBerkeley_FBB_Methods_04.25.2022.pdf
            %  
            %  slice the table with varargin

            if ~isempty(this.amyloid_) && ~isempty(this.av45_) && ~isempty(this.fbb_)
                t = this.amyloid_;
                t = this.table_paren(t, varargin{:});
                t_av45 = this.av45_;
                t_av45 = this.table_paren(t_av45, varargin{:});
                t_fbb = this.fbb_;
                t_fbb = this.table_paren(t_fbb, varargin{:});
                return
            end

            if this.reuse_cache && ...
                    (isfile(this.amyloid_file) && isfile(this.av45_file) && isfile(this.fbb_file))
                t = readtable(this.amyloid_file);
                t.EXAMDATE = datetime(t.EXAMDATE);
                this.amyloid_ = t;
                t = this.table_paren(t, varargin{:});

                t_av45 = readtable(this.av45_file);
                t_av45.EXAMDATE = datetime(t_av45.EXAMDATE);
                this.av45_ = t_av45;
                t_av45 = this.table_paren(t_av45, varargin{:});
                
                t_fbb = readtable(this.fbb_file);
                t_fbb.EXAMDATE = datetime(t_fbb.EXAMDATE);
                this.fbb_ = t_fbb;
                t_fbb = this.table_paren(t_fbb, varargin{:});
                return
            end

            % read tables of av45, florbetaben
            % rebuild caches
            % write this.amyloid_file
            assert(isfile(this.av45_file))
            t_av45 = readtable(this.av45_file);
            t_av45.TRACER = repmat({'av45'}, [size(t_av45,1) 1]);
            assert(isfile(this.fbb_file))
            t_fbb = readtable(this.fbb_file);
            t_fbb.TRACER = repmat({'fbb'}, [size(t_fbb,1) 1]);

            % reduce tables according to study design
            switch this.study_design
                case 'longitudinal'
                    t_av45.AmyloidStatus = double(t_av45{:, 'SUMMARYSUVR_COMPOSITE_REFNORM'} >= 0.78);
                    t_fbb.AmyloidStatus = double(t_fbb{:, 'SUMMARYSUVR_COMPOSITE_REFNORM'} >= 0.74);
                    t = this.reduce_long_tables(t_av45, t_fbb);
                case 'cross-sectional'
                    t_av45.AmyloidStatus = double(t_av45{:, 'SUMMARYSUVR_WHOLECEREBNORM'} >= 1.11);
                    t_fbb.AmyloidStatus = double(t_fbb{:, 'SUMMARYSUVR_WHOLECEREBNORM'} >= 1.08);
                    t = this.reduce_cross_tables(t_av45, t_fbb);
                otherwise
                    error('mladni:ValueError', 'this.study_design->%s', this.study_design)
            end
            this.av45_ = t_av45;
            this.fbb_ = t_fbb;
            this.amyloid_ = t;

            % write reduced amyloid table
            writetable(t, this.amyloid_file);

            % slice the table with varargin
            t = this.table_paren(t, varargin{:});
        end
        function t = table_apoe(this, varargin)
            if isempty(this.apoe_)
                this.apoe_ = readtable(this.apoe_file);
            end
            t = this.apoe_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_cdr(this, varargin)
            if isempty(this.cdr_)
                this.cdr_ = readtable(this.cdr_file);
                this.cdr_.CDDATE = datetime(this.cdr_.CDDATE, InputFormat='yyyy-MM-dd');
            end
            t = this.cdr_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_CDRSB_from_bl(this, varargin)
            %  bl_thresh ~ 0 => 411 subjects
            %              1 => 792
            %              2 => 1074
            %              3 => 1204
            %              4 => 1277
            %              5 => 1360
            %  total avail. subjects ~ 1855

            ip = inputParser;
            addOptional(ip, 'bl_thresh', 1, @isscalar) % select subjects with baseline <= bl_thresh
            addParameter(ip, 'use_cached', false, @islogical)
            parse(ip, varargin{:})
            ipr = ip.Results;

            if ipr.use_cached && ~isempty(this.CDRSB_bl_)
                t = this.CDRSB_bl_;
                return
            end

            % lazy init
            s = this.subjects_(1);
            t_ = this.merge_;
            t_ = t_(t_.CDRSB_bl <= ipr.bl_thresh, :);
            t__ = t_(t_.RID == s & ~isnan(t_.FDG), :); % pick subject subtable
            d = max(t__.CDRSB); % scalar dCDRSB
            t = table(s, d, 'VariableNames', {'RID', 'CDRSB'});
            for ui = 2:length(this.subjects_)
                s = this.subjects_(ui);
                u__ = t_(t_.RID == s & ~isnan(t_.FDG), :); 
                d = max(u__.CDRSB);
                try
                    t = [t; table(s, d, 'VariableNames', {'RID', 'CDRSB'})]; %#ok<AGROW> 
                catch
                    %fprintf("no reasonable subtable for RID ~ %g\n", this.subjects_(ui))
                end
            end
            this.CDRSB_bl_ = t;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_merge(this, varargin)
            if isempty(this.merge_)
                this.merge_ = readtable(this.merge_file);
                this.merge_ = this.best_practice_baseline_EXAMDATE(this.merge_);
            end
            t = this.merge_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_mpr_meta(this, varargin)
            if isempty(this.mpr_meta_)
                this.mpr_meta_ = readtable(this.mpr_meta_file);
            end
            t = this.mpr_meta_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_mri_imageqc(this, varargin)
            if isempty(this.mri_imageqc_)
                this.mri_imageqc_ = readtable(this.mri_imageqc_file);
            end
            t = this.mri_imageqc_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_mri_quality(this, varargin)
            if isempty(this.mri_quality_)
                this.mri_quality_ = readtable(this.mri_quality_file);
            end
            t = this.mri_quality_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_mri_quality_adni3(this, varargin)
            if isempty(this.mri_quality_adni3_)
                this.mri_quality_adni3_ = readtable(this.mri_quality_adni3_file);
            end
            t = this.mri_quality_adni3_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_neuropath(this, varargin)
            if isempty(this.neuropath_)
                this.neuropath_ = readtable(this.neuropath_file);
            end
            t = this.neuropath_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_pet_c3(this, varargin)
            if isempty(this.pet_c3_)
                this.pet_c3_ = readtable(this.pet_c3_file);
            end
            t = this.pet_c3_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_pet_qc(this, varargin)
            if isempty(this.pet_qc_)
                this.pet_qc_ = readtable(this.pet_qc_file);
            end
            t = this.pet_qc_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_registry(this, varargin)
            if isempty(this.registry_)
                this.registry_ = readtable(this.registry_file);
            end
            t = this.registry_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_strokesum(this, varargin)
            if isempty(this.strokesum_)
                this.strokesum_ = readtable(this.strokesum_file);
            end
            t = this.strokesum_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_tau(this, varargin)
            %% Strictly from Berkeley imaging
            %  https://adni.bitbucket.io/reference/ucberkeleyav1451.html
            %  https://adni.bitbucket.io/reference/docs/UCBERKELEYAV1451/UCBERKELEY_AV1451_Methods_04.25.2022.pdf

            vars = {'RID' 'EXAMDATE' ...
                'META_TEMPORAL_SUVR' 'BRAAK1_SUVR' 'BRAAK34_SUVR' 'BRAAK56_SUVR' ...
                'META_TEMPORAL_VOLUME' 'BRAAK1_VOLUME' 'BRAAK34_VOLUME' 'BRAAK56_VOLUME'}; % BRAAK2 is excessively contaminated per *.pdf above
                
            if ~isempty(this.tau_)
                t = this.tau_;

                % slice the table with varargin
                t = this.table_paren(t, varargin{:});
                return
            end

            if isfile(this.tau_file) && this.reuse_cache
                t = readtable(this.tau_file);
                t.EXAMDATE = datetime(t.EXAMDATE);
                this.tau_ = t;
                
                % slice the table with varargin
                t = this.table_paren(t, varargin{:});
                return
            end

            % rebuild caches
            t_av1451 = this.table_ucberkeleyav1451;
            t = t_av1451(:, vars);

            % adjust tables according to study design
            switch this.study_design
                case 'cross-sectional'
                    norm = t_av1451.INFERIOR_CEREBGM_SUVR;
                case 'longitudinal'
                    norm = t_av1451.INFERIOR_CEREBGM_SUVR;
                otherwise
                    error('mladni:ValueError', 'this.study_design->%s', this.study_design)
            end
            for v = vars(contains(vars, 'SUVR'))
                t{:, v{1}} = t{:, v{1}}./norm;
            end
            writetable(t, this.tau_file);

            % slice the table with varargin
            t = this.table_paren(t, varargin{:});
        end
        function t = table_ucberkeleyav1451(this, varargin)
            %% https://adni.bitbucket.io/reference/ucberkeleyav1451.html
            %  https://adni.bitbucket.io/reference/docs/UCBERKELEYAV1451/UCBERKELEY_AV1451_Methods_04.25.2022.pdf

            if isempty(this.ucberkeleyav1451_) 
                t_ = readtable(this.ucberkeleyav1451_file);            
                t_.EXAMDATE = datetime(t_.EXAMDATE);
                this.ucberkeleyav1451_ = t_;
            end
            t = this.ucberkeleyav1451_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_ucberkeleyfdg(this, varargin)
            if isempty(this.ucberkeleyfdg_)
                t_ = readtable(this.ucberkeleyfdg_file);            
                t_.EXAMDATE = datetime(t_.EXAMDATE);
                this.ucberkeleyfdg_ = t_;
            end
            t = this.ucberkeleyfdg_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_ucsdvol(this, varargin)
            if isempty(this.ucsdvol_)
                t_ = readtable(this.ucsdvol_file); 
                t_.CDATE = datetime(t_.CDATE, 'InputFormat','MM/dd/uuuu');
                t_.EXAMDATE = datetime(t_.EXAMDATE);
                this.ucsdvol_ = t_;
            end
            t = this.ucsdvol_;
            t = this.table_paren(t, varargin{:});
        end
        function t = table_ucsfsntvol(this, varargin)
            if isempty(this.ucsfsntvol_)
                t_ = readtable(this.ucsfsntvol_file);            
                t_.EXAMDATE = datetime(t_.EXAMDATE);
                this.ucsfsntvol_ = t_;
            end
            t = this.ucsfsntvol_;
            t = this.table_paren(t, varargin{:});
        end 
        function v = variableNames(this)
            v = this.merge_.Properties.VariableNames;
        end

        function this = AdniMerge(home, design, opts)
            arguments
                home {mustBeFolder} = pwd
                design {mustBeTextScalar} = 'longitudinal'
                opts.reuse_cache logical = false
            end
            this.home = home;
            this.study_design = design;
            this.reuse_cache = opts.reuse_cache;
            
            cd(this.home)
            this.merge_ = readtable(this.merge_file);
            dict_full_ = readtable(this.dict_file);
            this.dict_ = table(dict_full_.FLDNAME, dict_full_.TEXT, 'VariableNames', {'field', 'description'});
            this.subjects_ = unique(this.merge_.RID);            
        end
    end

    methods (Static)
        function t = table_paren(t, varargin)
            assert(istable(t))
            if ~isempty(varargin)
                t = t(varargin{:});
            end
        end
    end

    %% PROTECTED

    properties (Access = protected)
        amyloid_
        av45_
        apoe_
        cdr_
        CDRSB_bl_
        dict_
        fbb_
        merge_
        mpr_meta_
        mri_imageqc_
        mri_quality_
        mri_quality_adni3_
        neuropath_
        pet_c3_
        pet_qc_
        registry_
        strokesum_
        subjects_
        tau_
        ucberkeleyav1451_
        ucberkeleyfdg_
        ucsdvol_
        ucsfsntvol_
    end
    
    %  Created with mlsystem.Newcl, inspired by Frank Gonzalez-Morphy's newfcn.
end
