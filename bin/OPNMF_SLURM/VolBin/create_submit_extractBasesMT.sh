#!/bin/bash

mkdir -p ${3}/NumBases${2}/slurm_job_output

echo '#!/bin/bash  '
echo '### Job Name  '
echo '#SLURM -J extractBasesMT  '
echo '### Save output and error files in the following folder  '
echo "#SLURM -o ${3}/NumBases${2}/slurm_job_output/slurm.log  "

# removed emailing
# echo '### Send email to user about the job from the execution server  '
# echo '#SLURM --mail-user=wustlid@wustl.edu  '
# echo '### Sends email only in certain cases; see sbatch docs  '
# echo '#SBATCH --mail-type=END,FAIL,TIME_LIMIT'

echo '### Start job with priority - default is zero  '
echo '#SLURM --priority=0  '
echo '### Select 1 nodes with 4 CPU  '
echo '#SLURM --nodes=1  '
echo '#SLURM --ntasks-per-node=4  '
echo '### Select 24Gb RAM  '
echo '#SLURM --mem=128G  '
echo '### Select wall time  '
echo '#SLURM -t 24:00:00  '
echo '  '
echo '# set up useful variables  '
echo '  '
echo 'MCRROOT="/export/matlab/MCR/R2018b/v95"  '
echo 'BinDir="path to VolBin/extractBasesMT"  '
echo 'extractBases="${BinDir}/run_extractBasesMT.sh"  '
echo '  '
echo '# parse input variables  '
echo "inFiles=$1	  "
echo "numBases=$2  "
echo "outputDir=$3  "
echo '  '
echo '##########################################  '
echo '#                                        #  '
echo '#   Output some useful job information.  #  '
echo '#                                        #  '
echo '##########################################  '
echo '  '

# commented out lines didn't have an obvious SLURM equivalent
# see: https://wiki.gacrc.uga.edu/wiki/Migrating_from_Torque_to_Slurm
echo '# stdout  '
echo 'echo "------------------------------------------------------"   '
echo '( echo -n "Job is running on node "; $SLURM_JOB_NODELIST )   '
echo 'echo "------------------------------------------------------"   '
echo 'echo "SLURM: sbatch is running on ${SLURM_SUBMIT_HOST}"   '
# echo 'echo "PBS: originating queue is ${PBS_O_QUEUE}"   '
echo 'echo "SLURM: executing queue is ${SLURM_JOB_PARTITION}"   '
echo 'echo "SLURM: working directory is ${SLURM_SUBMIT_DIR}"   '
# echo 'echo "PBS: execution mode is ${PBS_ENVIRONMENT}"   '
echo 'echo "SLURM: job identifier is ${SLURM_JOB_ID}"   '
echo 'echo "SLURM: job name is ${SLURM_JOB_NAME}"   '
# echo 'echo "PBS: node file is ${PBS_NODEFILE}"   '
# echo 'echo "PBS: current home directory is ${PBS_O_HOME}"   '
# echo 'echo "PBS: PATH = ${PBS_O_PATH}"   '
echo 'echo "------------------------------------------------------"  '

echo 'echo "Command: ${BinDir}/run_extractBasesMT.sh"   '
echo 'echo "Arguments: Input files: ${inFiles} NumBases: ${numBases} Output directory: ${outputDir}"  '
echo '  '
echo '( echo -e "Executing in: \c"; pwd )   '
echo '( echo -e "Executing at: \c"; date )   '
echo '  '

# omitting, instead combining stdout & stderr
# echo '# stderr  '
# echo 'echo "------------------------------------------------------" 1>&2  '
# echo '( echo -n "Job is running on node "; $SLURM_JOB_NODELIST ) 1>&2  '
# echo 'echo "------------------------------------------------------" 1>&2  '
# echo 'echo "PBS: qsub is running on ${PBS_O_HOST}" 1>&2  '
# echo 'echo "PBS: originating queue is ${PBS_O_QUEUE}" 1>&2  '
# echo 'echo "PBS: executing queue is ${PBS_QUEUE}" 1>&2  '
# echo 'echo "PBS: working directory is ${PBS_O_WORKDIR}" 1>&2  '
# echo 'echo "PBS: execution mode is ${PBS_ENVIRONMENT}" 1>&2  '
# echo 'echo "PBS: job identifier is ${PBS_JOBID}" 1>&2  '
# echo 'echo "PBS: job name is ${PBS_JOBNAME}" 1>&2  '
# echo 'echo "PBS: node file is ${PBS_NODEFILE}" 1>&2  '
# echo 'echo "PBS: current home directory is ${PBS_O_HOME}" 1>&2  '
# echo 'echo "PBS: PATH = ${PBS_O_PATH}" 1>&2  '
# echo 'echo "------------------------------------------------------" 1>&2  '
# echo 'echo "Command: ${BinDir}/run_extractBasesMT.sh" 1>&2  '
# echo 'echo "Arguments: Input files: ${inFiles} NumBases: ${numBases} Output directory: ${outputDir} " 1>&2  '
# echo '( echo -e "Executing in: \c"; pwd ) 1>&2  '
# echo '( echo -e "Executing at: \c"; date ) 1>&2  '

echo '  '
echo '# keep some extra information in the output directory  '
echo 'mkdir -p ${outputDir}/NumBases${numBases}  '
echo '  '
echo '# date  '
echo 'date2save=$(date +"%m-%d-%y")  '
echo '  '
echo '# output command  '
echo -n 'command="${BinDir}/run_extractBasesMT.sh ${MCRROOT} OPNMF ${inFiles} 1 ${numBases} outputDir ${outputDir} initMeth 4 saveInterm 1 negPos 0 downSample 2"  '
echo -e "\n"
echo 'echo ${command} > ${outputDir}/NumBases${numBases}/command_${date2save}.txt  '
echo '"${extractBases}" "${MCRROOT}" "OPNMF" "${inFiles}" "1" "${numBases}" "outputDir" "${outputDir}" "initMeth" "4" "saveInterm" "1" "negPos" "0" "downSample" "2"'  
echo '  '
echo 'if [ $? != 0 ] ;   '
echo 'then  '
echo '	date_info=$(date)  '
echo '	echo "${date_info} : Failure to execute extractBasesMT"  '
echo -n '	echo "${date_info} : Failure to execute extractBasesMT, JobID: ${SLURM_JOB_ID}, method: OPNMF, number of bases:  ${numBases}" >> ${outputDir}/FailedExtractBasesExperimentsMT.txt  '
echo -e "\n"
echo '	exit 1  '
echo 'fi  '
